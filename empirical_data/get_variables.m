%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/kevinaquino/projects/modelling_gusatvo/participants.tsv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/11/15 14:18:52

%% Initialize variables.
filename = '/Users/kevinaquino/projects/modelling_gusatvo/participants.tsv';
delimiter = '\t';
startRow = 2;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,5,6,7,10,11,12,13,14,15]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [3,5,6,7,10,11,12,13,14,15]);
rawCellColumns = raw(:, [1,2,4,8,9,16]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
participant_id = rawCellColumns(:, 1);
diagnosis = rawCellColumns(:, 2);
age = cell2mat(rawNumericColumns(:, 1));
gender = rawCellColumns(:, 3);
bart = cell2mat(rawNumericColumns(:, 2));
bht = cell2mat(rawNumericColumns(:, 3));
dwi = cell2mat(rawNumericColumns(:, 4));
pamenc = rawCellColumns(:, 4);
pamret = rawCellColumns(:, 5);
rest = cell2mat(rawNumericColumns(:, 5));
scap = cell2mat(rawNumericColumns(:, 6));
stopsignal = cell2mat(rawNumericColumns(:, 7));
T1w = cell2mat(rawNumericColumns(:, 8));
taskswitch = cell2mat(rawNumericColumns(:, 9));
ScannerSerialNumber = cell2mat(rawNumericColumns(:, 10));
ghost_NoGhost = rawCellColumns(:, 6);


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;


%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/kevinaquino/projects/modelling_gusatvo/UCLA_data_all.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/11/15 14:19:45

%% Initialize variables.
filename = '/Users/kevinaquino/projects/modelling_gusatvo/UCLA_data_all.txt';
delimiter = '';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));


%% Split data into numeric and cell columns.
rawNumericColumns = {};
rawCellColumns = raw(:, 1);


%% Allocate imported array to column variable names
subjects_processed = rawCellColumns(:, 1);


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawNumericColumns rawCellColumns;

% for j=1:length(diagnosis),

% end


for j=1:length(subjects_processed),
	ind_sub = strcmpi(subjects_processed{j},participant_id);
	subject_matrix{j,1} = subjects_processed{j};
	subject_matrix{j,2} = age(ind_sub);
	subject_matrix{j,3} = diagnosis{ind_sub};
end

% split the subjects into groups:

AllControls = [1:121];
AllSZ = [122:171];
allBD = [172:220];
allADHD = [221:260];
% Look at SCZ matched controls
szAge = cell2mat(subject_matrix(AllSZ,2));
bdAge = cell2mat(subject_matrix(allBD,2));

ageMatchedCtlForSZ = [];
ageMatchedCtlForBD = [];
for j=1:length(AllSZ)	
	ctAge = cell2mat(subject_matrix(AllControls,2));
	[~,nearAg] = min(abs(szAge(j) - ctAge));
	ageMatchedCtlForSZ = [ageMatchedCtlForSZ,AllControls(nearAg)]; 
	AllControls = setdiff(AllControls,AllControls(nearAg));
end


for j=1:length(allBD)	
	ctAge = cell2mat(subject_matrix(AllControls,2));
	[~,nearAg] = min(abs(bdAge(j) - ctAge));
	ageMatchedCtlForBD = [ageMatchedCtlForBD,AllControls(nearAg)]; 
	AllControls = setdiff(AllControls,AllControls(nearAg));
end



figure('color','white');
subplot(121);
hist(cell2mat(subject_matrix(ageMatchedCtlForSZ,2)));
title('Age Matched Controls');xlabel('Age');ylabel('count');set(gca,'fontSize',18)
subplot(122);
hist(szAge);
title('SZ');xlabel('Age');ylabel('count');set(gca,'fontSize',18)



figure('color','white');
subplot(121);
hist(cell2mat(subject_matrix(ageMatchedCtlForBD,2)));
title('Age Matched Controls');xlabel('Age');ylabel('count');set(gca,'fontSize',18)
subplot(122);
hist(bdAge);
title('BD');xlabel('Age');ylabel('count');set(gca,'fontSize',18)